version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: inventory_management
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - inventory-network

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - inventory-network

  # Backend Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://inventory_user:inventory_password@database:5432/inventory_management
      - JWT_SECRET=production-jwt-secret-change-this
      - JWT_EXPIRES_IN=7d
      - PORT=5000
      - FRONTEND_URL=http://localhost:3000
      - EMAIL_ENABLED=false
      - REDIS_URL=redis://redis:6379
    depends_on:
      - database
      - redis
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - inventory-network

  # Frontend Client
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_ENVIRONMENT=production
    depends_on:
      - backend
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - inventory-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - inventory-network

volumes:
  postgres_data:
  redis_data:

networks:
  inventory-network:
    driver: bridge